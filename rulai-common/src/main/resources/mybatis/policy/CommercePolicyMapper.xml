<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.policy.CommercePolicyMapper">
  <resultMap id="BaseResultMap" type="com.unicdata.entity.policy.CommercePolicy">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="policy_code" jdbcType="VARCHAR" property="policyCode" />
    <result column="policy_name" jdbcType="VARCHAR" property="policyName" />
    <result column="policy_create_date" jdbcType="TIMESTAMP" property="policyCreateDate" />
    <result column="store_id" jdbcType="INTEGER" property="storeId" />
    <result column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, policy_code, policy_name, policy_create_date, store_id, employee_id, create_date,
    update_date
  </sql>
  <select id="selectByExample" parameterType="com.unicdata.entity.policy.CommercePolicyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from commerce_policy
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from commerce_policy
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from commerce_policy
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.unicdata.entity.policy.CommercePolicy">
    insert into commerce_policy (id, policy_code, policy_name,
    policy_create_date, store_id, employee_id,
    create_date, update_date)
    values (#{id,jdbcType=INTEGER}, #{policyCode,jdbcType=VARCHAR}, #{policyName,jdbcType=VARCHAR},
    #{policyCreateDate,jdbcType=TIMESTAMP}, #{storeId,jdbcType=INTEGER}, #{employeeId,jdbcType=INTEGER},
    #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.unicdata.entity.policy.CommercePolicy">
    insert into commerce_policy
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="policyCode != null">
        policy_code,
      </if>
      <if test="policyName != null">
        policy_name,
      </if>
      <if test="policyCreateDate != null">
        policy_create_date,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="policyCode != null">
        #{policyCode,jdbcType=VARCHAR},
      </if>
      <if test="policyName != null">
        #{policyName,jdbcType=VARCHAR},
      </if>
      <if test="policyCreateDate != null">
        #{policyCreateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.policy.CommercePolicy">
    update commerce_policy
    <set>
      <if test="policyCode != null">
        policy_code = #{policyCode,jdbcType=VARCHAR},
      </if>
      <if test="policyName != null">
        policy_name = #{policyName,jdbcType=VARCHAR},
      </if>
      <if test="policyCreateDate != null">
        policy_create_date = #{policyCreateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="storeId != null">
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.policy.CommercePolicy">
    update commerce_policy
    set policy_code = #{policyCode,jdbcType=VARCHAR},
      policy_name = #{policyName,jdbcType=VARCHAR},
      policy_create_date = #{policyCreateDate,jdbcType=TIMESTAMP},
      store_id = #{storeId,jdbcType=INTEGER},
      employee_id = #{employeeId,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectPolicyVirtualRecordTotal" resultType="java.lang.Integer">
       select rc.car_id from rebate_car rc
        left join rebate_project rp on rc.rebate_project_id = rp.id
        left join car_good_info car on rc.car_id = car.id
        where rc.policy_id =  #{policyId} and rp.rebate_project_type  = 2  and car.virtual_record_status = 1 group by car_id
  </select>


</mapper>