<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.basedata.DictionaryMapper">
  <resultMap id="BaseResultMap" type="com.unicdata.entity.basedata.Dictionary">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="type_desc" jdbcType="VARCHAR" property="typeDesc" />
    <result column="resource_key" jdbcType="INTEGER" property="resourceKey" />
    <result column="resource_value" jdbcType="VARCHAR" property="resourceValue" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, enabled, type, type_desc, resource_key, resource_value, create_time, modify_time
  </sql>
  <select id="selectByExample" parameterType="com.unicdata.entity.basedata.DictionaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from dictionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from dictionary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from dictionary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.unicdata.entity.basedata.Dictionary">
    insert into dictionary (id, enabled, type, 
      type_desc, resource_key, resource_value, 
      create_time, modify_time)
    values (#{id,jdbcType=INTEGER}, #{enabled,jdbcType=BIT}, #{type,jdbcType=INTEGER}, 
      #{typeDesc,jdbcType=VARCHAR}, #{resourceKey,jdbcType=INTEGER}, #{resourceValue,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.unicdata.entity.basedata.Dictionary">
    insert into dictionary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="typeDesc != null">
        type_desc,
      </if>
      <if test="resourceKey != null">
        resource_key,
      </if>
      <if test="resourceValue != null">
        resource_value,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="modifyTime != null">
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="typeDesc != null">
        #{typeDesc,jdbcType=VARCHAR},
      </if>
      <if test="resourceKey != null">
        #{resourceKey,jdbcType=INTEGER},
      </if>
      <if test="resourceValue != null">
        #{resourceValue,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null">
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.basedata.Dictionary">
    update dictionary
    <set>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="typeDesc != null">
        type_desc = #{typeDesc,jdbcType=VARCHAR},
      </if>
      <if test="resourceKey != null">
        resource_key = #{resourceKey,jdbcType=INTEGER},
      </if>
      <if test="resourceValue != null">
        resource_value = #{resourceValue,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null">
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.basedata.Dictionary">
    update dictionary
    set enabled = #{enabled,jdbcType=BIT},
      type = #{type,jdbcType=INTEGER},
      type_desc = #{typeDesc,jdbcType=VARCHAR},
      resource_key = #{resourceKey,jdbcType=INTEGER},
      resource_value = #{resourceValue,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>