<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.boutique.BoutiqueRetailRecordMapper">
  <resultMap id="BaseResultMap" type="com.unicdata.entity.boutique.BoutiqueRetailRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="retail_id" jdbcType="INTEGER" property="retailId" />
    <result column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="note" jdbcType="VARCHAR" property="note" />
    <result column="time_stamp" jdbcType="TIMESTAMP" property="timeStamp" />
    <result column="create_id" jdbcType="INTEGER" property="createId" />
    <result column="store_id" jdbcType="INTEGER" property="storeId" />
    <result column="is_division" jdbcType="INTEGER" property="isDivision" />
    <result column="type_live" jdbcType="INTEGER" property="typeLive" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_id, retail_id, employee_id, type, note, time_stamp, create_id, store_id, 
    is_division, type_live
  </sql>
  <select id="selectByExample" parameterType="com.unicdata.entity.boutique.BoutiqueRetailRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from boutique_retail_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from boutique_retail_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from boutique_retail_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.unicdata.entity.boutique.BoutiqueRetailRecord">
    insert into boutique_retail_record (id, order_id, retail_id, 
      employee_id, type, note, 
      time_stamp, create_id, store_id, 
      is_division, type_live)
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{retailId,jdbcType=INTEGER}, 
      #{employeeId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, 
      #{timeStamp,jdbcType=TIMESTAMP}, #{createId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{isDivision,jdbcType=INTEGER}, #{typeLive,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.unicdata.entity.boutique.BoutiqueRetailRecord">
    insert into boutique_retail_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="retailId != null">
        retail_id,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="timeStamp != null">
        time_stamp,
      </if>
      <if test="createId != null">
        create_id,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="isDivision != null">
        is_division,
      </if>
      <if test="typeLive != null">
        type_live,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="retailId != null">
        #{retailId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="timeStamp != null">
        #{timeStamp,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null">
        #{createId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="isDivision != null">
        #{isDivision,jdbcType=INTEGER},
      </if>
      <if test="typeLive != null">
        #{typeLive,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.boutique.BoutiqueRetailRecord">
    update boutique_retail_record
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="retailId != null">
        retail_id = #{retailId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="timeStamp != null">
        time_stamp = #{timeStamp,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null">
        create_id = #{createId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null">
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="isDivision != null">
        is_division = #{isDivision,jdbcType=INTEGER},
      </if>
      <if test="typeLive != null">
        type_live = #{typeLive,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.boutique.BoutiqueRetailRecord">
    update boutique_retail_record
    set order_id = #{orderId,jdbcType=INTEGER},
      retail_id = #{retailId,jdbcType=INTEGER},
      employee_id = #{employeeId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR},
      time_stamp = #{timeStamp,jdbcType=TIMESTAMP},
      create_id = #{createId,jdbcType=INTEGER},
      store_id = #{storeId,jdbcType=INTEGER},
      is_division = #{isDivision,jdbcType=INTEGER},
      type_live = #{typeLive,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <insert id="insertUseGeneratedKeys"   useGeneratedKeys="true" keyProperty="id" 
  	parameterType="com.unicdata.entity.boutique.BoutiqueRetailRecord">
    insert into boutique_retail_record (id, order_id, retail_id, 
      employee_id, type, note, 
      time_stamp, create_id, store_id, 
      is_division, type_live)
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{retailId,jdbcType=INTEGER}, 
      #{employeeId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, 
      #{timeStamp,jdbcType=TIMESTAMP}, #{createId,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, 
      #{isDivision,jdbcType=INTEGER}, #{typeLive,jdbcType=INTEGER})
  </insert>
  
  
  <update id="updateByRetailId">
  	UPDATE boutique_retail_record SET is_division = #{isDivision,jdbcType=INTEGER}
  	WHERE retail_id = #{retailId,jdbcType=INTEGER}
  </update>
  
  <select id="getBoutiqueRetailRecordByStoreIdPage" parameterType="java.util.Map" resultType="java.util.Map">
  	SELECT 
	CASE b.source
	WHEN '0' THEN '销售订单'
	WHEN '1' THEN '售后订单'
	WHEN '2' THEN '精品零售单'
	END source,
		CASE a.type
	WHEN '2' THEN
		'不通过'
	WHEN '3' THEN
		'通过'
	 END type,
	b.sale_count,
	b.apply_count,
	CONCAT(FORMAT( (b.apply_count/b.sale_count) * 100 , 2),'%') discount,
	date_format(a.time_stamp, '%Y-%m-%d %H:%i:%s') recordDate ,
	c.full_name full_name,
	b.id retailId,
	a.is_division is_division
	FROM
		boutique_retail_record a
	LEFT JOIN boutique_retail b ON a.retail_id = b.id
	LEFT JOIN employee c ON b.employee_id = c.id
	WHERE
		a.type > 1
	AND a.store_id = #{storeId,jdbcType=INTEGER}
	<if test="null != startTime">
	AND date_format(a.time_stamp, '%Y-%m-%d') &gt;= #{startTime}
	</if>
  	<if test="null != endTime">
	AND date_format(a.time_stamp, '%Y-%m-%d') &lt;= #{endTime}
	
  	</if>
	ORDER BY a.time_stamp DESC
  	
<!--   	FROM boutique_retail_record a
  	LEFT JOIN boutique_retail ret
  	WHERE rec.store_id = #{storeId,jdbcType=INTEGER} AND rec.type > 1 
  	AND rec.retail_id = ret.id
  	<if test="null != startTime">
  		AND date_format(rec.timeStamp, '%Y-%m') &gt;= date_format(#{startTime}, '%Y-%m')
  	</if>
  	<if test="null != endTime">
  		AND date_format(rec.timeStamp, '%Y-%m') &lt;= date_format(#{startTime}, '%Y-%m')
  	</if> -->
  	
  	
  
  </select>
  
  
  <select id="selectRecordByRetailId" resultMap="BaseResultMap">
  	SELECT <include refid="Base_Column_List"/>
  	FROM boutique_retail_record
  	WHERE retail_id = #{retailId,jdbcType=INTEGER}
  	ORDER BY time_stamp DESC
  	
  </select>
  
</mapper>