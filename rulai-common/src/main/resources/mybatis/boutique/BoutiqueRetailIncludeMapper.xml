<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.boutique.BoutiqueRetailIncludeMapper">
  <resultMap id="BaseResultMap" type="com.unicdata.entity.boutique.BoutiqueRetailInclude">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="retail_id" jdbcType="INTEGER" property="retailId" />
    <result column="information_id" jdbcType="INTEGER" property="informationId" />
    <result column="pack_id" jdbcType="INTEGER" property="packId" />
    <result column="information_num" jdbcType="INTEGER" property="informationNum" />
    <result column="pack_num" jdbcType="INTEGER" property="packNum" />
    <result column="sale_value" jdbcType="DECIMAL" property="saleValue" />
    <result column="apply_value" jdbcType="DECIMAL" property="applyValue" />
    <result column="division_value" jdbcType="DECIMAL" property="divisionValue" />
    <result column="is_gift" jdbcType="INTEGER" property="isGift" />
    <result column="is_package" jdbcType="INTEGER" property="isPackage" />
    <result column="type_live" jdbcType="INTEGER" property="typeLive" />
    <result column="construction_node" jdbcType="INTEGER" property="constructionNode" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, retail_id, information_id, pack_id, information_num, pack_num, sale_value, apply_value, 
    division_value, is_gift, is_package, type_live, construction_node
  </sql>
  <select id="selectByExample" parameterType="com.unicdata.entity.boutique.BoutiqueRetailIncludeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from boutique_retail_include
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from boutique_retail_include
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from boutique_retail_include
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.unicdata.entity.boutique.BoutiqueRetailInclude">
    insert into boutique_retail_include (id, retail_id, information_id, 
      pack_id, information_num, pack_num, 
      sale_value, apply_value, division_value, 
      is_gift, is_package, type_live, 
      construction_node)
    values (#{id,jdbcType=INTEGER}, #{retailId,jdbcType=INTEGER}, #{informationId,jdbcType=INTEGER}, 
      #{packId,jdbcType=INTEGER}, #{informationNum,jdbcType=INTEGER}, #{packNum,jdbcType=INTEGER}, 
      #{saleValue,jdbcType=DECIMAL}, #{applyValue,jdbcType=DECIMAL}, #{divisionValue,jdbcType=DECIMAL}, 
      #{isGift,jdbcType=INTEGER}, #{isPackage,jdbcType=INTEGER}, #{typeLive,jdbcType=INTEGER}, 
      #{constructionNode,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.unicdata.entity.boutique.BoutiqueRetailInclude">
    insert into boutique_retail_include
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="retailId != null">
        retail_id,
      </if>
      <if test="informationId != null">
        information_id,
      </if>
      <if test="packId != null">
        pack_id,
      </if>
      <if test="informationNum != null">
        information_num,
      </if>
      <if test="packNum != null">
        pack_num,
      </if>
      <if test="saleValue != null">
        sale_value,
      </if>
      <if test="applyValue != null">
        apply_value,
      </if>
      <if test="divisionValue != null">
        division_value,
      </if>
      <if test="isGift != null">
        is_gift,
      </if>
      <if test="isPackage != null">
        is_package,
      </if>
      <if test="typeLive != null">
        type_live,
      </if>
      <if test="constructionNode != null">
        construction_node,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="retailId != null">
        #{retailId,jdbcType=INTEGER},
      </if>
      <if test="informationId != null">
        #{informationId,jdbcType=INTEGER},
      </if>
      <if test="packId != null">
        #{packId,jdbcType=INTEGER},
      </if>
      <if test="informationNum != null">
        #{informationNum,jdbcType=INTEGER},
      </if>
      <if test="packNum != null">
        #{packNum,jdbcType=INTEGER},
      </if>
      <if test="saleValue != null">
        #{saleValue,jdbcType=DECIMAL},
      </if>
      <if test="applyValue != null">
        #{applyValue,jdbcType=DECIMAL},
      </if>
      <if test="divisionValue != null">
        #{divisionValue,jdbcType=DECIMAL},
      </if>
      <if test="isGift != null">
        #{isGift,jdbcType=INTEGER},
      </if>
      <if test="isPackage != null">
        #{isPackage,jdbcType=INTEGER},
      </if>
      <if test="typeLive != null">
        #{typeLive,jdbcType=INTEGER},
      </if>
      <if test="constructionNode != null">
        #{constructionNode,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.boutique.BoutiqueRetailInclude">
    update boutique_retail_include
    <set>
      <if test="retailId != null">
        retail_id = #{retailId,jdbcType=INTEGER},
      </if>
      <if test="informationId != null">
        information_id = #{informationId,jdbcType=INTEGER},
      </if>
      <if test="packId != null">
        pack_id = #{packId,jdbcType=INTEGER},
      </if>
      <if test="informationNum != null">
        information_num = #{informationNum,jdbcType=INTEGER},
      </if>
      <if test="packNum != null">
        pack_num = #{packNum,jdbcType=INTEGER},
      </if>
      <if test="saleValue != null">
        sale_value = #{saleValue,jdbcType=DECIMAL},
      </if>
      <if test="applyValue != null">
        apply_value = #{applyValue,jdbcType=DECIMAL},
      </if>
      <if test="divisionValue != null">
        division_value = #{divisionValue,jdbcType=DECIMAL},
      </if>
      <if test="isGift != null">
        is_gift = #{isGift,jdbcType=INTEGER},
      </if>
      <if test="isPackage != null">
        is_package = #{isPackage,jdbcType=INTEGER},
      </if>
      <if test="typeLive != null">
        type_live = #{typeLive,jdbcType=INTEGER},
      </if>
      <if test="constructionNode != null">
        construction_node = #{constructionNode,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.boutique.BoutiqueRetailInclude">
    update boutique_retail_include
    set retail_id = #{retailId,jdbcType=INTEGER},
      information_id = #{informationId,jdbcType=INTEGER},
      pack_id = #{packId,jdbcType=INTEGER},
      information_num = #{informationNum,jdbcType=INTEGER},
      pack_num = #{packNum,jdbcType=INTEGER},
      sale_value = #{saleValue,jdbcType=DECIMAL},
      apply_value = #{applyValue,jdbcType=DECIMAL},
      division_value = #{divisionValue,jdbcType=DECIMAL},
      is_gift = #{isGift,jdbcType=INTEGER},
      is_package = #{isPackage,jdbcType=INTEGER},
      type_live = #{typeLive,jdbcType=INTEGER},
      construction_node = #{constructionNode,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectListByRetail" parameterType="java.lang.Integer" resultType="java.util.Map">
    SELECT
		bri.information_num AS informationNum,
		bri.sale_value AS saleValue,
		bri.apply_value AS applyValue,
		bi.name
	FROM
		boutique_retail_include bri
	LEFT JOIN boutique_information bi ON bri.information_id = bi.id
    where bri.retail_id = #{retailId,jdbcType=INTEGER}
    and bri.is_package = 0
    and bri.type_live = 1
  </select>
  
  <resultMap type="com.unicdata.entity.boutique.BoutiqueRetailInclude" id="SelectResultMap" extends="BaseResultMap">
      <result column="informationCode" jdbcType="VARCHAR" property="informationCode" />
      <result column="informationName" jdbcType="VARCHAR" property="informationName" />
      <result column="is_host" jdbcType="INTEGER" property="isHost" />
  </resultMap>
  
  <select id="selectListByRetailId" parameterType="java.lang.Integer" resultMap="SelectResultMap">
  	SELECT 
  	a.id AS id, a.retail_id AS retail_id, a.information_id AS information_id, a.pack_id AS pack_id,
  	 a.information_num AS information_num, a.pack_num AS pack_num, a.sale_value AS sale_value, a.apply_value AS apply_value, a.division_value AS division_value,
    a.is_gift AS is_gift, a.is_package AS is_package, a.type_live AS type_live, a.construction_node AS construction_node,
  	
  	b.code AS  informationCode,
  	b.name AS informationName,
  	c.is_host AS is_host
  	
  	FROM boutique_retail_include a
  		LEFT JOIN boutique_information b ON a.information_id = b.id
  		LEFT JOIN boutique_supplier c ON b.supplier_id = c.id
  	
  	WHERE a.retail_id = #{retailId,jdbcType=INTEGER}
  	AND a.type_live = 1 
  </select>
  
  <select id="selectAllByRetailId" resultMap="BaseResultMap">
  	SELECT <include refid="Base_Column_List"/>
  	FROM boutique_retail_include 
  	WHERE retail_id = #{retailId,jdbcType=INTEGER}
  </select>
  
  <update id="updateRetailDivisionById">
  	UPDATE boutique_retail_include
  	SET division_value = #{divisionValue,jdbcType=DECIMAL}
  	WHERE id = #{id,jdbcType=INTEGER}
  </update>
  <delete id="deleteByMap" parameterType="java.util.Map">
    delete from boutique_retail_include
    where retail_id = #{retailId,jdbcType=INTEGER}
    <if test="informationId!=null">
    	AND information_id = #{informationId,jdbcType=INTEGER}
    </if>
    <if test="packId!=null">
    	AND pack_id = #{packId,jdbcType=INTEGER}
    </if>
    AND is_package = #{isPackage,jdbcType=INTEGER}
  </delete>
  
  <select id="getBoutiquePackageByMap" parameterType="java.util.Map" resultType="java.util.Map">
  	select bri.information_id informationId,bri.pack_id packageId,bri.information_num informationNum,
	bri.sale_value saleValue,bri.construction_node constructionNode,bri.is_gift isGift,bi.`name`,
	bi.tax_price taxPrice
	from boutique_retail_include bri
	LEFT JOIN boutique_information bi  ON bi.id = bri.information_id 
	WHERE bri.retail_id = #{retailId,jdbcType=INTEGER}
     AND bri.type_live=1
	<if test="packageId!=null">
    	AND bri.pack_id = #{packageId,jdbcType=INTEGER}
    </if>
    <if test="informationId!=null">
    	AND bri.information_id = #{informationId,jdbcType=INTEGER}
    </if>
    <if test="isPackage!=null">
    	AND bri.is_package = #{isPackage,jdbcType=INTEGER}
    </if>
  </select>
  <!-- 批量插入 -->
  <insert id="insertBatch" parameterType="java.util.List">
    insert into boutique_retail_include (retail_id, information_id, 
      pack_id, information_num, 
      sale_value, apply_value, is_gift, 
      is_package, construction_node
      )
    values 
    <foreach item="item" index="index" collection="list" separator=","> 
    	( #{item.retailId,jdbcType=INTEGER}, #{item.informationId,jdbcType=INTEGER}, 
      #{item.packId,jdbcType=INTEGER}, #{item.informationNum,jdbcType=INTEGER},  
      #{item.saleValue,jdbcType=DECIMAL}, #{item.saleValue,jdbcType=DECIMAL}, #{item.isGift,jdbcType=INTEGER}, 
      #{item.isPackage,jdbcType=INTEGER}, #{item.constructionNode,jdbcType=INTEGER}
      )
    </foreach>
  </insert>
  
  <update id="updateBatch" parameterType="java.util.List">
	<foreach collection="list" separator=";" item="item">
    	update boutique_retail_include set	construction_node = #{item.constructionNode},
	      	is_gift = #{item.isGift}
    	where retail_id = #{item.retailId} AND type_live = 1
    	AND is_package = #{item.isPackage}
    	<if test="item.informationId!=null">
    		AND information_id = #{item.informationId}
    	</if>
    	<if test="item.packId!=null">
    		AND pack_id = #{item.packId}
    	</if> 
    </foreach>
  </update>
  <update id="updateRetailInclude" parameterType="com.unicdata.entity.boutique.BoutiqueRetailInclude">
    	update boutique_retail_include set	construction_node = #{constructionNode},
	      	is_gift = #{isGift}
    	where retail_id = #{retailId} AND type_live = 1
    	AND is_package = #{isPackage}
    	<if test="informationId!=null">
    		AND information_id = #{informationId}
    	</if>
    	<if test="packId!=null">
    		AND pack_id = #{packId}
    	</if> 
  </update>
  <select id="calcBoutiqueSumByRetailId" parameterType="java.lang.Integer" resultType="java.math.BigDecimal">
  	SELECT IFNULL(SUM(salve_value),0) total FROM (
	SELECT bp.salve_value from boutique_retail_include bri
	LEFT JOIN boutique_package bp ON bp.id = bri.pack_id
	WHERE bri.retail_id =#{retailId} AND bri.is_gift = #{isGift} AND is_package = 1
	GROUP BY bri.pack_id
	UNION
	SELECT IFNULL(sale_value,0) * IFNULL(information_num,1) salve_value from boutique_retail_include
	WHERE retail_id =#{retailId} AND is_gift = #{isGift} AND is_package = 0
	) tab
  </select>
  
  <select id="selectRetailPackageId" resultType="java.lang.Integer">
  	SELECT
	pack_id
	FROM
		boutique_retail_include
	WHERE
		retail_id = #{retailId,jdbcType=INTEGER}
	AND is_gift = 0
	AND pack_id IS NOT NULL
	GROUP BY
		pack_id
  </select>
  
</mapper>