<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.boutique.BoutiqueRetailMapper">
    <resultMap id="BaseResultMap" type="com.unicdata.entity.boutique.BoutiqueRetail">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="code" jdbcType="VARCHAR" property="code"/>
        <result column="customer_id" jdbcType="INTEGER" property="customerId"/>
        <result column="employee_id" jdbcType="INTEGER" property="employeeId"/>
        <result column="operator_id" jdbcType="INTEGER" property="operatorId"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="project" jdbcType="VARCHAR" property="project"/>
        <result column="sale_date" jdbcType="TIMESTAMP" property="saleDate"/>
        <result column="sale_num" jdbcType="INTEGER" property="saleNum"/>
        <result column="sale_count" jdbcType="DECIMAL" property="saleCount"/>
        <result column="apply_count" jdbcType="DECIMAL" property="applyCount"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="invoice" jdbcType="INTEGER" property="invoice"/>
        <result column="reason" jdbcType="VARCHAR" property="reason"/>
        <result column="order_id" jdbcType="INTEGER" property="orderId"/>
    	<result column="margin" jdbcType="DECIMAL" property="margin" />
        <result column="source" jdbcType="INTEGER" property="source"/>
        <result column="store_id" jdbcType="INTEGER" property="storeId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="type_live" jdbcType="INTEGER" property="typeLive"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, code, customer_id, employee_id, operator_id, phone, project, sale_date, sale_num, 
    sale_count, apply_count, type, invoice, reason, order_id,margin, source, store_id, status, 
    type_live
  </sql>
    <select id="selectByExample" parameterType="com.unicdata.entity.boutique.BoutiqueRetailExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from boutique_retail
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from boutique_retail
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from boutique_retail
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.unicdata.entity.boutique.BoutiqueRetail">
    insert into boutique_retail (id, code, customer_id, 
      employee_id, operator_id, phone, 
      project, sale_date, sale_num, 
      sale_count, apply_count, type, 
      invoice, reason, order_id,margin, 
      source, store_id, status, 
      type_live)
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{customerId,jdbcType=INTEGER}, 
      #{employeeId,jdbcType=INTEGER}, #{operatorId,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, 
      #{project,jdbcType=VARCHAR}, #{saleDate,jdbcType=TIMESTAMP}, #{saleNum,jdbcType=INTEGER}, 
      #{saleCount,jdbcType=DECIMAL}, #{applyCount,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER}, 
      #{invoice,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, #{orderId,jdbcType=INTEGER},#{margin,jdbcType=DECIMAL}, 
      #{source,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{typeLive,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.unicdata.entity.boutique.BoutiqueRetail" useGeneratedKeys="true"
            keyProperty="id">
        insert into boutique_retail
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="customerId != null">
                customer_id,
            </if>
            <if test="employeeId != null">
                employee_id,
            </if>
            <if test="operatorId != null">
                operator_id,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="project != null">
                project,
            </if>
            <if test="saleDate != null">
                sale_date,
            </if>
            <if test="saleNum != null">
                sale_num,
            </if>
            <if test="saleCount != null">
                sale_count,
            </if>
            <if test="applyCount != null">
                apply_count,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="invoice != null">
                invoice,
            </if>
            <if test="reason != null">
                reason,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="margin != null">
                margin,
            </if>
            <if test="source != null">
                source,
            </if>
            <if test="storeId != null">
                store_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="typeLive != null">
                type_live,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="customerId != null">
                #{customerId,jdbcType=INTEGER},
            </if>
            <if test="employeeId != null">
                #{employeeId,jdbcType=INTEGER},
            </if>
            <if test="operatorId != null">
                #{operatorId,jdbcType=INTEGER},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="project != null">
                #{project,jdbcType=VARCHAR},
            </if>
            <if test="saleDate != null">
                #{saleDate,jdbcType=TIMESTAMP},
            </if>
            <if test="saleNum != null">
                #{saleNum,jdbcType=INTEGER},
            </if>
            <if test="saleCount != null">
                #{saleCount,jdbcType=DECIMAL},
            </if>
            <if test="applyCount != null">
                #{applyCount,jdbcType=DECIMAL},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="invoice != null">
                #{invoice,jdbcType=INTEGER},
            </if>
            <if test="reason != null">
                #{reason,jdbcType=VARCHAR},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="margin != null">
                #{margin,jdbcType=DECIMAL},
            </if>
            <if test="source != null">
                #{source,jdbcType=INTEGER},
            </if>
            <if test="storeId != null">
                #{storeId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="typeLive != null">
                #{typeLive,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.boutique.BoutiqueRetail">
        update boutique_retail
        <set>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="customerId != null">
                customer_id = #{customerId,jdbcType=INTEGER},
            </if>
            <if test="employeeId != null">
                employee_id = #{employeeId,jdbcType=INTEGER},
            </if>
            <if test="operatorId != null">
                operator_id = #{operatorId,jdbcType=INTEGER},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="project != null">
                project = #{project,jdbcType=VARCHAR},
            </if>
            <if test="saleDate != null">
                sale_date = #{saleDate,jdbcType=TIMESTAMP},
            </if>
            <if test="saleNum != null">
                sale_num = #{saleNum,jdbcType=INTEGER},
            </if>
            <if test="saleCount != null">
                sale_count = #{saleCount,jdbcType=DECIMAL},
            </if>
            <if test="applyCount != null">
                apply_count = #{applyCount,jdbcType=DECIMAL},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="invoice != null">
                invoice = #{invoice,jdbcType=INTEGER},
            </if>
            <if test="reason != null">
                reason = #{reason,jdbcType=VARCHAR},
            </if>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=INTEGER},
            </if>
            <if test="margin != null">
                margin = #{margin,jdbcType=DECIMAL},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=INTEGER},
            </if>
            <if test="storeId != null">
                store_id = #{storeId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="typeLive != null">
                type_live = #{typeLive,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.boutique.BoutiqueRetail">
    update boutique_retail
    set code = #{code,jdbcType=VARCHAR},
      customer_id = #{customerId,jdbcType=INTEGER},
      employee_id = #{employeeId,jdbcType=INTEGER},
      operator_id = #{operatorId,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      project = #{project,jdbcType=VARCHAR},
      sale_date = #{saleDate,jdbcType=TIMESTAMP},
      sale_num = #{saleNum,jdbcType=INTEGER},
      sale_count = #{saleCount,jdbcType=DECIMAL},
      apply_count = #{applyCount,jdbcType=DECIMAL},
      type = #{type,jdbcType=INTEGER},
      invoice = #{invoice,jdbcType=INTEGER},
      reason = #{reason,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=INTEGER},
      margin = #{margin,jdbcType=DECIMAL},
      source = #{source,jdbcType=INTEGER},
      store_id = #{storeId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      type_live = #{typeLive,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="selectByCondition" parameterType="com.unicdata.entity.boutique.BoutiqueRetail"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from boutique_retail
        where status = 1
        <if test="null != orderId">
            AND order_id = #{orderId,jdbcType=INTEGER}
        </if>
        <if test="null != source">
            AND source = #{source,jdbcType=INTEGER}
        </if>
        LIMIT 1
    </select>
    <select id="selectListByCondition" parameterType="java.lang.Integer" resultType="java.util.Map">
        SELECT
        br.id,
        br.code,
        br.customer_id as customerId,
        br.employee_id as employeeId,
        br.phone,
        br.project,
        DATE_FORMAT(br.sale_date,'%Y-%m-%d %H:%i:%s') saleDate,
        br.sale_num as saleNum,
        br.sale_count as saleCount,
        br.apply_count as applyCount,
        br.type,
        br.invoice,
        br.reason,
        br.order_id as orderId,
        br.source,
        br.store_id as storeId,
        brc.name as customerName,
        brc.phone as customerPhone,
        brc.note as customerNote,
        e.full_name as sellerName
        FROM
        boutique_retail br
        LEFT JOIN boutique_retail_customer brc on br.customer_id = brc.id
        LEFT JOIN employee e on br.employee_id = e.id
        <where>
            <if test="null != code and code != ''">
                and br.code like CONCAT('%',#{code,jdbcType=VARCHAR},'%')
            </if>
            <if test="null != name and name != ''">
                and brc.name like CONCAT('%',#{name,jdbcType=VARCHAR},'%')
            </if>
            <if test="null != phone and phone != ''">
                and brc.phone like CONCAT('%',#{phone,jdbcType=VARCHAR},'%')
            </if>
            <if test="null != employeeName">
                and e.full_name like CONCAT('%',#{employeeName,jdbcType=VARCHAR},'%')
            </if>
            <if test="null != type">
                and br.type = #{type,jdbcType=INTEGER}
            </if>
            and br.store_id = #{storeId,jdbcType=INTEGER}
            and br.source = 2
            and br.status = 1
            and br.type_live = 1
        </where>
        order by br.sale_date desc
    </select>
    <!--某月精品收入 -->
    <select id="getMouthBoutiqueRetailByStoreId" parameterType="java.util.Map"
            resultType="java.util.Map">
        SELECT
        br.id,
        br.code,
        br.source,
        br.sale_count,
        br.apply_count,
        br.customer_id,
        e.full_name,
        br.order_id,
        br.type,
        date_format(br.sale_date,'%Y-%m-%d %H:%i') as saleDate,
        br.reason,
        brc.name as retailCusName,
        c.name as sellCusName
        FROM
        boutique_retail br
        LEFT JOIN employee e ON br.employee_id = e.id
        LEFT JOIN boutique_retail_customer brc ON br.customer_id = brc.id
        LEFT JOIN customer c ON br.customer_id = c.id
        WHERE
        br.STATUS = 1
        AND br.type_live = 1
        <!--排除 精品订单状态(0,"无")(1,"待审批"),(2,"审批不通过"),(3,"待付款"),(4,"已收讫")， 5 已退单,6 未提交审批 -->
        AND br.type not IN (6)
        <if test="orderId != null">
            AND br.order_id =#{orderId}
        </if>
        <if test="id != null">
            AND br.id =#{id}
        </if>
        <if test="null != saleDate and  type != null">
            AND (br.TYPE =#{type} or date_format(br.sale_date, '%Y-%m-%d') = date_format(#{saleDate}, '%Y-%m-%d'))
        </if>
        <if test="null != dayDate">
            AND date_format(br.sale_date, '%Y-%m-%d') = date_format(#{dayDate}, '%Y-%m-%d')
        </if>
        <if test="null != storeId">
            AND br.store_id=#{storeId}
        </if>
        <if test="null != source">
            AND br.source=#{source}
        </if>
        <if test="null != code and '' != code">
            AND br.code LIKE CONCAT('%',#{code},'%')
        </if>
        <if test="null != name and '' != name">
            AND (case br.source
            when 0 then c.name LIKE CONCAT('%',#{name},'%')
            when 2 then brc.name LIKE CONCAT('%',#{name},'%')
            end)
        </if>
        ORDER BY sale_date DESC

    </select>
    <!--某月某日交车订单精品收入 -->
    <select id="getBoutiqueDeliverCarByStoreId" parameterType="java.util.Map"
            resultType="java.lang.Integer">
        SELECT
        IFNULL(SUM(br.apply_count),0) as apply_count
        FROM
        boutique_retail br
        LEFT JOIN `order` o ON o.id = br.order_id
        LEFT JOIN deliver_car dc ON dc.id = o.car_id
        WHERE
        br.`status` = 1
        AND type_live = 1
        <if test="type != null">
            AND br.TYPE =#{type}
        </if>
        <if test="null != saleDate">
            AND date_format(br.sale_date, '%Y-%m') = date_format(#{saleDate}, '%Y-%m')
        </if>
        <if test="null != dayDate">
            AND date_format(br.sale_date, '%Y-%m-%d') = date_format(#{dayDate}, '%Y-%m-%d')
        </if>
        <if test="null != storeId">
            AND br.store_id=#{storeId}
        </if>
        <if test="null != source">
            AND br.source=#{source}
        </if>
    </select>
    <!--某月精品/礼包成本含税-->
    <select id="getMouthCostSumByisPackage" parameterType="java.util.Map" resultType="java.lang.Double">
        SELECT
        <if test="isPackage==0">
            IFNULL(SUM(bi.information_num * bn.tax_price),0)
        </if>
        <if test="isPackage==1">
            IFNULL(SUM(bp.information_num * bn.tax_price),0)
        </if>
        FROM
        boutique_retail br
        LEFT JOIN boutique_retail_include bi ON br.id=bi.retail_id
        <if test="isPackage==0">
            LEFT JOIN boutique_information bn ON bn.id=bi.information_id
        </if>
        <if test="isPackage==1">
            LEFT JOIN boutique_package_include bp ON bi.pack_id=bp.package_id
            LEFT JOIN boutique_information bn ON bn.id=bp.information_id
        </if>
        WHERE br.`status` = 1
        AND br.type_live = 1
        <if test="isPackage==0">
            AND bi.is_package=0
        </if>
        <if test="isPackage==1">
            AND bp.type_live=1
            AND bi.is_package=1
        </if>
        <if test="saleDate!=null">
            AND date_format(sale_date, '%Y-%m') = date_format(#{saleDate}, '%Y-%m')
        </if>
        <if test="storeId!=null">
            AND br.store_id=#{storeId}
        </if>
        <if test="null != source">
            AND br.source=#{source}
        </if>
        <if test="null != type">
            AND br.type=#{type}
        </if>
    </select>

    <insert id="insertUseGeneratedKeys" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.unicdata.entity.boutique.BoutiqueRetail">
	INSERT INTO boutique_retail (id, code, customer_id, 
      employee_id, operator_id, phone, 
      project, sale_date, sale_num, 
      sale_count, apply_count, type, 
      invoice, reason, order_id, 
      source, store_id, status, 
      type_live)
    VALUES (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{customerId,jdbcType=INTEGER}, 
      #{employeeId,jdbcType=INTEGER}, #{operatorId,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, 
      #{project,jdbcType=VARCHAR}, #{saleDate,jdbcType=TIMESTAMP}, #{saleNum,jdbcType=INTEGER}, 
      #{saleCount,jdbcType=DECIMAL}, #{applyCount,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER}, 
      #{invoice,jdbcType=INTEGER}, #{reason,jdbcType=VARCHAR}, #{orderId,jdbcType=INTEGER}, 
      #{source,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{typeLive,jdbcType=INTEGER})
	</insert>

    <select id="getBoutiquePackageOrderId" resultType="java.util.Map" parameterType="java.lang.Integer">
	    SELECT br.id,br.order_id orderId,br.type,bri.pack_id AS boutiqueId,br.sale_count saleCount,
	    br.apply_count applyCount,bp.name,bp.salve_value saleValue,bri.is_gift isGift,bri.is_package isPackage,
	    bri.construction_node constructionNode,bri.information_num informationNum 
		FROM boutique_retail br 
			LEFT JOIN boutique_retail_include bri ON bri.retail_id = br.id 
			LEFT JOIN boutique_package bp ON bp.id = bri.pack_id 
		WHERE br.order_id = #{orderId} AND bri.is_package = 1 AND br.status =1 AND br.type_live =1 
		GROUP BY bri.pack_id 
    </select>

    <select id="getBoutiqueInformationOrderId" resultType="java.util.Map" parameterType="java.lang.Integer">
	    SELECT br.id,br.order_id orderId,br.type,bri.information_id AS boutiqueId,br.sale_count saleCount,
			br.apply_count applyCount,bi.name,bri.sale_value saleValue,bri.is_gift isGift,bri.is_package isPackage,
			bri.construction_node constructionNode,bri.information_num informationNum  
		FROM boutique_retail br 
			LEFT JOIN boutique_retail_include bri ON bri.retail_id = br.id 
			LEFT JOIN boutique_information bi ON bi.id = bri.information_id 
		WHERE br.order_id = #{orderId} AND bri.is_package = 0 AND br.status =1 AND br.type_live =1 
    </select>

    <resultMap type="com.unicdata.entity.boutique.BoutiqueRetail" id="DetailResultMap" extends="BaseResultMap">
        <result column="department_desc" jdbcType="VARCHAR" property="departmentDesc"/>
        <result column="employee_name" jdbcType="VARCHAR" property="employeeName"/>
        <result column="operator_name" jdbcType="VARCHAR" property="operatorName"/>
        <result column="customer_name" jdbcType="VARCHAR" property="customerName"/>
        <result column="customer_phone" jdbcType="VARCHAR" property="customerPhone"/>
        <result column="post_name" jdbcType="VARCHAR" property="postName"/>

    </resultMap>

    <select id="selectBoutiqueRetailDetailById" parameterType="java.lang.Integer" resultMap="DetailResultMap">
		
		SELECT 
		  a.id AS id, a.code AS code, a.customer_id AS customer_id, 
	      a.employee_id AS employee_id, a.operator_id AS operator_id, a.phone AS phone, 
	      a.project AS project, a.sale_date AS sale_date, a.sale_num AS sale_num, 
	      a.sale_count AS sale_count, a.apply_count AS apply_count, a.type AS type, 
	      a.invoice AS invoice, a.reason AS reason, a.order_id AS order_id, 
	      a.source AS source, a.store_id AS store_id, a.status AS status,
		  b.department_desc AS department_desc,
		  b.full_name AS employee_name,
		  b.post_name AS post_name,
		  c.full_name AS operator_name,
		  d.name AS customer_name,
		  d.phone AS customer_phone
		FROM	
			boutique_retail a 
			LEFT JOIN employee b ON a.employee_id = b.id
			LEFT JOIN employee c ON a.operator_id = c.id
			LEFT JOIN boutique_retail_customer d ON a.customer_id = d.id
		WHERE a.id = #{id,jdbcType=INTEGER}
		
	</select>

    <select id="selectBoutiqueRetailPage" parameterType="com.unicdata.condition.BoutiqueRetailCondition"
            resultMap="DetailResultMap">
        SELECT
        a.id AS id, a.code AS code, a.customer_id AS customer_id,
        a.employee_id AS employee_id, a.operator_id AS operator_id, a.phone AS phone,
        a.project AS project, a.sale_date AS sale_date, a.sale_num AS sale_num,
        a.sale_count AS sale_count, a.apply_count AS apply_count, a.type AS type,
        a.invoice AS invoice, a.reason AS reason, a.order_id AS order_id,
        a.source AS source, a.store_id AS store_id, a.status AS status,
        b.department_desc AS department_desc,
        b.full_name AS employee_name,
        b.post_name AS post_name,
        c.full_name AS operator_name,
        d.name AS customer_name,
        d.phone AS customer_phone
        FROM
        boutique_retail a
        LEFT JOIN employee b ON a.employee_id = b.id
        LEFT JOIN employee c ON a.operator_id = c.id
        LEFT JOIN boutique_retail_customer d ON a.customer_id = d.id

        WHERE a.type_live = 1 AND a.store_id = #{storeId,jdbcType=INTEGER} AND a.source = 2 AND type != 6
        <if test="code != null and code != '' ">
            AND a.code LIKE CONCAT('%', #{code,jdbcType=VARCHAR} ,'%')
        </if>
        <if test="customerName != null and customerName != ''">
            AND d.name LIKE CONCAT('%', #{customerName,jdbcType=VARCHAR} ,'%')
        </if>
        <if test="saleDate != null and saleDate != ''">
            AND a.sale_date &gt;= #{beginDate,jdbcType=TIMESTAMP} AND a.sale_date &lt;= #{endDate,jdbcType=TIMESTAMP}
        </if>
        <if test="type != null">
            <if test="type >= 3">
                AND a.type &gt;= #{type,jdbcType=INTEGER}
            </if>
            <if test="type == 1 ">
                AND a.type = #{type,jdbcType=INTEGER}
            </if>
            <if test="type == 2 ">
                AND a.type = #{type,jdbcType=INTEGER}
            </if>

        </if>
        ORDER BY sale_date DESC

    </select>
    <!--通过精品id获取精品详情-->
    <select id="getBoutiqueOrderId" resultType="java.util.Map" parameterType="java.lang.Integer">
        SELECT
        bri.id,
        bi. NAME AS informationName,
        bi.tax_price,
        bri.information_id,
        bri.information_num,
        bp.`name` AS packName,
        bri.pack_id,
        bri.pack_num,
        bri.sale_value,
        bri.is_gift isGift,
        bri.is_package,
        bri.construction_node
        FROM
        boutique_retail br
        LEFT JOIN boutique_retail_include bri ON bri.retail_id = br.id
        LEFT JOIN boutique_information bi ON bi.id = bri.information_id
        LEFT JOIN boutique_package bp ON bp.id=bri.pack_id
        WHERE bri.type_live=1
        AND    br.id = #{id}

    </select>
    <!--通过订单id获取精品详情-->
    <select id="getBoutiqueRetailByOId" resultType="java.util.Map" parameterType="java.lang.Integer">
        SELECT
        bri.id,
        bi. NAME AS informationName,
        bi.tax_price,
        bri.information_id,
        bri.information_num,
        bp.`name` AS packName,
        bri.pack_id,
        bri.pack_num,
        bri.sale_value,
        bri.is_gift isGift,
        bri.is_package,
        bri.construction_node
        FROM
        boutique_retail br
        LEFT JOIN boutique_retail_include bri ON bri.retail_id = br.id
        LEFT JOIN boutique_information bi ON bi.id = bri.information_id
        LEFT JOIN boutique_package bp ON bp.id=bri.pack_id
        WHERE bri.type_live=1
        AND    br.order_id = #{orderId}

    </select>

    <select id="selectBoutiqueRetailDetailByOrderId" parameterType="java.lang.Integer" resultMap="DetailResultMap">
		SELECT 
		  a.id AS id, a.code AS code, a.customer_id AS customer_id, 
	      a.employee_id AS employee_id, a.operator_id AS operator_id, a.phone AS phone, 
	      a.project AS project, a.sale_date AS sale_date, a.sale_num AS sale_num, 
	      a.sale_count AS sale_count, a.apply_count AS apply_count, a.type AS type, 
	      a.invoice AS invoice, a.reason AS reason, a.order_id AS order_id, 
	      a.source AS source, a.store_id AS store_id, a.status AS status,
		  b.department_desc AS department_desc,
		  b.full_name AS employee_name,
		  b.post_name AS post_name,
		  c.full_name AS operator_name,
		  d.name AS customer_name,
		  d.phone AS customer_phone
		FROM	
			boutique_retail a 
			LEFT JOIN employee b ON a.employee_id = b.id
			LEFT JOIN employee c ON a.operator_id = c.id
			LEFT JOIN boutique_retail_customer d ON a.customer_id = d.id
		WHERE a.type_live = 1 AND  a.order_id = #{orderId,jdbcType=INTEGER}
	</select>
    <!--某月审批记录表 -->
    <select id="getBoutiqueEetailRecordByMouthId" parameterType="java.util.Map"
            resultType="java.util.Map">
        SELECT
        br.id,
        br.code,
        br.source,
        br.sale_count,
        br.apply_count,
        e.full_name,
        br.order_id,
        brr.type,
        date_format(
        brr.time_stamp,
        '%Y-%m-%d %H:%i'
        ) AS saleDate,
        brr.is_division,
        brc.name as retailCusName,
        c.name as sellCusName
        FROM
        boutique_retail_record brr
        LEFT JOIN boutique_retail br ON brr.retail_id = br.id
        LEFT JOIN employee e ON br.employee_id = e.id
        LEFT JOIN boutique_retail_customer brc ON br.customer_id = brc.id
        LEFT JOIN customer c ON br.customer_id = c.id
        WHERE
        STATUS = 1
        AND br.type_live = 1
        AND brr.type_live = 1
        <if test="type != null">
            AND brr.TYPE =#{type}
        </if>
        <if test="orderId != null">
            AND br.order_id =#{orderId}
        </if>
        <if test="null != stratTime">
            AND date_format(brr.time_stamp, '%Y-%m-%d') &gt;= date_format(#{stratTime}, '%Y-%m-%d')
        </if>
        <if test="null != endTime">
            AND date_format(brr.time_stamp, '%Y-%m-%d') &lt;= date_format(#{endTime}, '%Y-%m-%d')
        </if>
        <if test="null != storeId">
            AND brr.store_id=#{storeId}
        </if>
        ORDER BY brr.time_stamp DESC
    </select>

    <update id="approvalRetail">
    	UPDATE boutique_retail 
    	SET type = #{type,jdbcType=INTEGER}
    	WHERE id = #{reatilId,jdbcType=INTEGER}
    	
    </update>

    <update id="delBoutiqueRetail" parameterType="java.util.Map">
        update boutique_retail set
        status = #{status,jdbcType=INTEGER},
        type_live = #{status,jdbcType=INTEGER}
        where id = #{retailId,jdbcType=INTEGER}
        AND source = #{source}
        <if test="orderId != null">
            AND order_id =#{orderId}
        </if>
    </update>
    <update id="updateBoutiqueRetailByOrderId" parameterType="java.util.Map">
        update boutique_retail set
        apply_count = #{applyCount}
        where source = 0 AND order_id =#{orderId}
    </update>


</mapper>