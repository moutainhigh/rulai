<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.boutique.CheckItemMapper">
  <resultMap id="BaseResultMap" type="com.unicdata.entity.boutique.CheckItem">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="check_id" jdbcType="INTEGER" property="checkId" />
    <result column="boutique_id" jdbcType="INTEGER" property="boutiqueId" />
    <result column="physical_count_quantity" jdbcType="DECIMAL" property="physicalCountQuantity" />
    <result column="physical_inventory" jdbcType="DECIMAL" property="physicalInventory" />
    <result column="difference_quantity" jdbcType="DECIMAL" property="differenceQuantity" />
    <result column="difference_money" jdbcType="DECIMAL" property="differenceMoney" />
    <result column="cost" jdbcType="DECIMAL" property="cost" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, check_id, boutique_id, physical_count_quantity, physical_inventory, difference_quantity, 
    difference_money, cost
  </sql>
  <select id="selectByExample" parameterType="com.unicdata.entity.boutique.CheckItemExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from check_item
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from check_item
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from check_item
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.unicdata.entity.boutique.CheckItem">
    insert into check_item (id, check_id, boutique_id, 
      physical_count_quantity, physical_inventory, 
      difference_quantity, difference_money, cost
      )
    values (#{id,jdbcType=INTEGER}, #{checkId,jdbcType=INTEGER}, #{boutiqueId,jdbcType=INTEGER}, 
      #{physicalCountQuantity,jdbcType=DECIMAL}, #{physicalInventory,jdbcType=DECIMAL}, 
      #{differenceQuantity,jdbcType=DECIMAL}, #{differenceMoney,jdbcType=DECIMAL}, #{cost,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.unicdata.entity.boutique.CheckItem">
    insert into check_item
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="checkId != null">
        check_id,
      </if>
      <if test="boutiqueId != null">
        boutique_id,
      </if>
      <if test="physicalCountQuantity != null">
        physical_count_quantity,
      </if>
      <if test="physicalInventory != null">
        physical_inventory,
      </if>
      <if test="differenceQuantity != null">
        difference_quantity,
      </if>
      <if test="differenceMoney != null">
        difference_money,
      </if>
      <if test="cost != null">
        cost,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="checkId != null">
        #{checkId,jdbcType=INTEGER},
      </if>
      <if test="boutiqueId != null">
        #{boutiqueId,jdbcType=INTEGER},
      </if>
      <if test="physicalCountQuantity != null">
        #{physicalCountQuantity,jdbcType=DECIMAL},
      </if>
      <if test="physicalInventory != null">
        #{physicalInventory,jdbcType=DECIMAL},
      </if>
      <if test="differenceQuantity != null">
        #{differenceQuantity,jdbcType=DECIMAL},
      </if>
      <if test="differenceMoney != null">
        #{differenceMoney,jdbcType=DECIMAL},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.boutique.CheckItem">
    update check_item
    <set>
      <if test="checkId != null">
        check_id = #{checkId,jdbcType=INTEGER},
      </if>
      <if test="boutiqueId != null">
        boutique_id = #{boutiqueId,jdbcType=INTEGER},
      </if>
      <if test="physicalCountQuantity != null">
        physical_count_quantity = #{physicalCountQuantity,jdbcType=DECIMAL},
      </if>
      <if test="physicalInventory != null">
        physical_inventory = #{physicalInventory,jdbcType=DECIMAL},
      </if>
      <if test="differenceQuantity != null">
        difference_quantity = #{differenceQuantity,jdbcType=DECIMAL},
      </if>
      <if test="differenceMoney != null">
        difference_money = #{differenceMoney,jdbcType=DECIMAL},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.boutique.CheckItem">
    update check_item
    set check_id = #{checkId,jdbcType=INTEGER},
      boutique_id = #{boutiqueId,jdbcType=INTEGER},
      physical_count_quantity = #{physicalCountQuantity,jdbcType=DECIMAL},
      physical_inventory = #{physicalInventory,jdbcType=DECIMAL},
      difference_quantity = #{differenceQuantity,jdbcType=DECIMAL},
      difference_money = #{differenceMoney,jdbcType=DECIMAL},
      cost = #{cost,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getCheckItemsByParams" resultType="java.util.Map">
    SELECT
    ci.id,ci.boutique_id boutiqueId,bi. code,
    bi. name,bi.tax_price taxCost,bi.stock,bi.car_classify_id familyIds,
    bw.`name` warehouseName,bwp. NAME warehousePositionName,
    ci.physical_inventory physicalInventory,ci.difference_quantity differenceQuantity,
    ci.physical_count_quantity physicalCountQuantity,
    ci.difference_money differenceMoney,ci.check_id checkId
    FROM
    check_item ci
    LEFT JOIN boutique_information bi ON ci.boutique_id = bi.id
    LEFT JOIN boutique_warehouse bw ON bi.warehouse_id = bw.id
    LEFT JOIN boutique_warehouse_position bwp ON bi.position_id = bwp.id
    WHERE
    bi.type_live = 1
    AND bw.type_live = 1
    AND bwp.type_live = 1
    AND ci.check_id = #{checkId,jdbcType=INTEGER}
    <if test="gain == true" >
      AND ci.difference_money &gt; 0
    </if>
    <if test="gain == false" >
      AND ci.difference_money &lt; 0
    </if>
  </select>

  <delete id="deleteByCheckId" parameterType="java.lang.Integer">
    delete from check_item
    where check_id = #{checkId,jdbcType=INTEGER}
  </delete>
</mapper>