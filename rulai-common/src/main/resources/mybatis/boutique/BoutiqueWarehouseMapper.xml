<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.boutique.BoutiqueWarehouseMapper">
    <resultMap id="BaseResultMap" type="com.unicdata.entity.boutique.BoutiqueWarehouse">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="num" jdbcType="VARCHAR" property="num"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="type_live" jdbcType="INTEGER" property="typeLive"/>
        <result column="store_id" jdbcType="INTEGER" property="storeId"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, num, name, type_live, store_id
  </sql>
    <select id="selectByExample" parameterType="com.unicdata.entity.boutique.BoutiqueWarehouseExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from boutique_warehouse
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from boutique_warehouse
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from boutique_warehouse
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.unicdata.entity.boutique.BoutiqueWarehouse">
    insert into boutique_warehouse (id, num, name, 
      type_live, store_id)
    values (#{id,jdbcType=INTEGER}, #{num,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{typeLive,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.unicdata.entity.boutique.BoutiqueWarehouse">
        insert into boutique_warehouse
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="num != null">
                num,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="typeLive != null">
                type_live,
            </if>
            <if test="storeId != null">
                store_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="num != null">
                #{num,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="typeLive != null">
                #{typeLive,jdbcType=INTEGER},
            </if>
            <if test="storeId != null">
                #{storeId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.boutique.BoutiqueWarehouse">
        update boutique_warehouse
        <set>
            <if test="num != null">
                num = #{num,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="typeLive != null">
                type_live = #{typeLive,jdbcType=INTEGER},
            </if>
            <if test="storeId != null">
                store_id = #{storeId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.boutique.BoutiqueWarehouse">
    update boutique_warehouse
    set num = #{num,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      type_live = #{typeLive,jdbcType=INTEGER},
      store_id = #{storeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from boutique_warehouse where type_live = 1 AND store_id = #{storeId,jdbcType=INTEGER}
    </select>

    <update id="deleteById" parameterType="java.lang.Integer">
  	UPDATE boutique_warehouse SET type_live = 0 WHERE id = #{id,jdbcType=INTEGER}
  </update>

    <select id="getNamesByIds" resultType="String">
        select name from boutique_warehouse
        WHERE id IN
        <foreach collection="list" open="(" close=")" separator="," item="id" index="index">
            #{id}
        </foreach>
    </select>

	<select id="selectWarehouseByName" resultMap="BaseResultMap">
		select
        <include refid="Base_Column_List"/>
        from boutique_warehouse where name = #{name,jdbcType=VARCHAR} AND store_id = #{storeId,jdbcType=INTEGER}
	</select>


</mapper>