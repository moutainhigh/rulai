<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.boutique.BoutiquePackageIncludeMapper">
    <resultMap id="BaseResultMap" type="com.unicdata.entity.boutique.BoutiquePackageInclude">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="package_id" jdbcType="INTEGER" property="packageId"/>
        <result column="information_id" jdbcType="INTEGER" property="informationId"/>
        <result column="information_num" jdbcType="INTEGER" property="informationNum"/>
        <result column="type_live" jdbcType="INTEGER" property="typeLive"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, package_id, information_id, information_num, type_live
  </sql>
    <select id="selectByExample" parameterType="com.unicdata.entity.boutique.BoutiquePackageIncludeExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from boutique_package_include
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from boutique_package_include
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from boutique_package_include
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.unicdata.entity.boutique.BoutiquePackageInclude">
    insert into boutique_package_include (id, package_id, information_id, 
      information_num, type_live)
    values (#{id,jdbcType=INTEGER}, #{packageId,jdbcType=INTEGER}, #{informationId,jdbcType=INTEGER}, 
      #{informationNum,jdbcType=INTEGER}, #{typeLive,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.unicdata.entity.boutique.BoutiquePackageInclude">
        insert into boutique_package_include
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="packageId != null">
                package_id,
            </if>
            <if test="informationId != null">
                information_id,
            </if>
            <if test="informationNum != null">
                information_num,
            </if>
            <if test="typeLive != null">
                type_live,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="packageId != null">
                #{packageId,jdbcType=INTEGER},
            </if>
            <if test="informationId != null">
                #{informationId,jdbcType=INTEGER},
            </if>
            <if test="informationNum != null">
                #{informationNum,jdbcType=INTEGER},
            </if>
            <if test="typeLive != null">
                #{typeLive,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.boutique.BoutiquePackageInclude">
        update boutique_package_include
        <set>
            <if test="packageId != null">
                package_id = #{packageId,jdbcType=INTEGER},
            </if>
            <if test="informationId != null">
                information_id = #{informationId,jdbcType=INTEGER},
            </if>
            <if test="informationNum != null">
                information_num = #{informationNum,jdbcType=INTEGER},
            </if>
            <if test="typeLive != null">
                type_live = #{typeLive,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.boutique.BoutiquePackageInclude">
    update boutique_package_include
    set package_id = #{packageId,jdbcType=INTEGER},
      information_id = #{informationId,jdbcType=INTEGER},
      information_num = #{informationNum,jdbcType=INTEGER},
      type_live = #{typeLive,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <!-- 根据精品礼包id查询礼包明细 -->
    <select id="selectBoutiquePackageDetailByPid" parameterType="java.lang.Integer" resultType="java.util.Map">
    SELECT
    a.id,
	a.package_id AS packageId,
	a.information_id AS informationId,
	a.information_num AS informationNum,
	b.name,
	b.unitprice AS saleValue,
	b.construction_node AS constructionNode,
	b.tax_price
    FROM
	boutique_package_include a
	LEFT JOIN boutique_information b ON a.information_id = b.id
	WHERE a.package_id = #{packageId} and a.type_live = 1
  </select>

    <select id="selectByPackageId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM boutique_package_include
        WHERE type_live = 1 AND package_id = #{packageId,jdbcType=INTEGER}
    </select>


	<select id="sumPackageCountValue" resultType="java.math.BigDecimal">
		SELECT SUM(b.unitprice * a.information_num)
		FROM boutique_package_include a
		LEFT JOIN boutique_information b ON a.information_id = b.id
		WHERE a.package_id = #{packageId,jdbcType=INTEGER}
	</select>

</mapper>