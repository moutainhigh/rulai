<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.unicdata.dao.product.InsuranceTypePriceMapper">
    <resultMap id="BaseResultMap" type="com.unicdata.entity.product.InsuranceTypePrice">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="store_id" jdbcType="INTEGER" property="storeId"/>
        <result column="insurance_id" jdbcType="INTEGER" property="insuranceId"/>
        <result column="price_one" jdbcType="DECIMAL" property="priceOne"/>
        <result column="price_two" jdbcType="DECIMAL" property="priceTwo"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, store_id, insurance_id, price_one, price_two, type
  </sql>
    <select id="selectByExample" parameterType="com.unicdata.entity.product.InsuranceTypePriceExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from insurance_type_price
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from insurance_type_price
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from insurance_type_price
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.unicdata.entity.product.InsuranceTypePrice">
    insert into insurance_type_price (id, store_id, insurance_id, 
      price_one, price_two, type
      )
    values (#{id,jdbcType=INTEGER}, #{storeId,jdbcType=INTEGER}, #{insuranceId,jdbcType=INTEGER}, 
      #{priceOne,jdbcType=DECIMAL}, #{priceTwo,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.unicdata.entity.product.InsuranceTypePrice">
        insert into insurance_type_price
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="storeId != null">
                store_id,
            </if>
            <if test="insuranceId != null">
                insurance_id,
            </if>
            <if test="priceOne != null">
                price_one,
            </if>
            <if test="priceTwo != null">
                price_two,
            </if>
            <if test="type != null">
                type,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="storeId != null">
                #{storeId,jdbcType=INTEGER},
            </if>
            <if test="insuranceId != null">
                #{insuranceId,jdbcType=INTEGER},
            </if>
            <if test="priceOne != null">
                #{priceOne,jdbcType=DECIMAL},
            </if>
            <if test="priceTwo != null">
                #{priceTwo,jdbcType=DECIMAL},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.product.InsuranceTypePrice">
        update insurance_type_price
        <set>
            <if test="storeId != null">
                store_id = #{storeId,jdbcType=INTEGER},
            </if>
            <if test="insuranceId != null">
                insurance_id = #{insuranceId,jdbcType=INTEGER},
            </if>
            <if test="priceOne != null">
                price_one = #{priceOne,jdbcType=DECIMAL},
            </if>
            <if test="priceTwo != null">
                price_two = #{priceTwo,jdbcType=DECIMAL},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.product.InsuranceTypePrice">
    update insurance_type_price
    set store_id = #{storeId,jdbcType=INTEGER},
      insurance_id = #{insuranceId,jdbcType=INTEGER},
      price_one = #{priceOne,jdbcType=DECIMAL},
      price_two = #{priceTwo,jdbcType=DECIMAL},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <delete id="deleteByInsuranceIdAndStoreId" parameterType="java.lang.Integer">
        DELETE FROM insurance_type_price WHERE store_id = #{storeId,jdbcType=INTEGER}
        AND insurance_id IN
        <foreach collection="insuranceIds" open="(" close=")" separator="," item="id" index="index">
            #{id}
        </foreach>
    </delete>

    <select id="selectPrices" resultType="com.unicdata.entity.product.InsuranceTypePrice">
        SELECT it.id insuranceId,it.name insuranceName,it.self_defined selfDefined,it.has_base_fee type,itp.price_one priceOne,itp.price_two
        priceTwo
        FROM insurance_type it LEFT JOIN insurance_type_price itp ON it.id = itp.insurance_id
        WHERE 1=1
        <if test="level != null">
             AND  it.LEVEL = #{level,jdbcType=INTEGER}
        </if>
        <if test="selfDefined != null">
             AND it.self_defined = #{selfDefined,jdbcType=INTEGER}
        </if>
        <if test="storeId != null">
            AND itp.store_id = #{storeId,jdbcType=INTEGER}
        </if>
        <if test="id != null">
            AND it.id = #{id,jdbcType=INTEGER}
        </if>
        ORDER BY it.has_base_fee ASC
    </select>
</mapper>