<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.unicdata.dao.system.EmployeeAuthorizeMapper">
    <resultMap id="BaseResultMap" type="com.unicdata.entity.system.EmployeeAuthorize">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="employee_id" property="employeeId" jdbcType="INTEGER"/>
        <result column="employee_post" property="employeePost" jdbcType="VARCHAR"/>
        <result column="authorizer_id" property="authorizerId" jdbcType="INTEGER"/>
        <result column="authorizer_post" property="authorizerPost" jdbcType="VARCHAR"/>
        <result column="authorize_function" property="authorizeFunction" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
        <result column="data_status" property="dataStatus" jdbcType="TINYINT"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, employee_id, employee_post, authorizer_id, authorizer_post, authorize_function, 
    type, status, create_date, update_date, data_status
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.unicdata.entity.system.EmployeeAuthorizeExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from employee_authorize
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from employee_authorize
        where id = #{id,jdbcType=INTEGER}
    </select>
    <!--通过授权人和被授权人id查询-->
    <select id="selectByEmployeeId" resultMap="BaseResultMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from employee_authorize
        where employee_id = #{employeeId,jdbcType=INTEGER} AND  authorizer_id= #{authorizerId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee_authorize
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.unicdata.entity.system.EmployeeAuthorizeExample">
        delete from employee_authorize
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.unicdata.entity.system.EmployeeAuthorize">
    insert into employee_authorize (id, employee_id, employee_post, 
      authorizer_id, authorizer_post, authorize_function, 
      type, status, create_date, 
      update_date, data_status)
    values (#{id,jdbcType=INTEGER}, #{employeeId,jdbcType=INTEGER}, #{employeePost,jdbcType=VARCHAR}, 
      #{authorizerId,jdbcType=INTEGER}, #{authorizerPost,jdbcType=VARCHAR}, #{authorizeFunction,jdbcType=VARCHAR}, 
      #{type,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{dataStatus,jdbcType=TINYINT})
  </insert>
    <insert id="insertSelective" parameterType="com.unicdata.entity.system.EmployeeAuthorize">
        insert into employee_authorize
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="employeeId != null">
                employee_id,
            </if>
            <if test="employeePost != null">
                employee_post,
            </if>
            <if test="authorizerId != null">
                authorizer_id,
            </if>
            <if test="authorizerPost != null">
                authorizer_post,
            </if>
            <if test="authorizeFunction != null">
                authorize_function,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="dataStatus != null">
                data_status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="employeeId != null">
                #{employeeId,jdbcType=INTEGER},
            </if>
            <if test="employeePost != null">
                #{employeePost,jdbcType=VARCHAR},
            </if>
            <if test="authorizerId != null">
                #{authorizerId,jdbcType=INTEGER},
            </if>
            <if test="authorizerPost != null">
                #{authorizerPost,jdbcType=VARCHAR},
            </if>
            <if test="authorizeFunction != null">
                #{authorizeFunction,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="dataStatus != null">
                #{dataStatus,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.unicdata.entity.system.EmployeeAuthorizeExample"
            resultType="java.lang.Integer">
        select count(*) from employee_authorize
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update employee_authorize
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.employeeId != null">
                employee_id = #{record.employeeId,jdbcType=INTEGER},
            </if>
            <if test="record.employeePost != null">
                employee_post = #{record.employeePost,jdbcType=VARCHAR},
            </if>
            <if test="record.authorizerId != null">
                authorizer_id = #{record.authorizerId,jdbcType=INTEGER},
            </if>
            <if test="record.authorizerPost != null">
                authorizer_post = #{record.authorizerPost,jdbcType=VARCHAR},
            </if>
            <if test="record.authorizeFunction != null">
                authorize_function = #{record.authorizeFunction,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=TINYINT},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.createDate != null">
                create_date = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateDate != null">
                update_date = #{record.updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.dataStatus != null">
                data_status = #{record.dataStatus,jdbcType=TINYINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update employee_authorize
        set id = #{record.id,jdbcType=INTEGER},
        employee_id = #{record.employeeId,jdbcType=INTEGER},
        employee_post = #{record.employeePost,jdbcType=VARCHAR},
        authorizer_id = #{record.authorizerId,jdbcType=INTEGER},
        authorizer_post = #{record.authorizerPost,jdbcType=VARCHAR},
        authorize_function = #{record.authorizeFunction,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=TINYINT},
        status = #{record.status,jdbcType=TINYINT},
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
        data_status = #{record.dataStatus,jdbcType=TINYINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.unicdata.entity.system.EmployeeAuthorize">
        update employee_authorize
        <set>
            <if test="employeeId != null">
                employee_id = #{employeeId,jdbcType=INTEGER},
            </if>
            <if test="employeePost != null">
                employee_post = #{employeePost,jdbcType=VARCHAR},
            </if>
            <if test="authorizerId != null">
                authorizer_id = #{authorizerId,jdbcType=INTEGER},
            </if>
            <if test="authorizerPost != null">
                authorizer_post = #{authorizerPost,jdbcType=VARCHAR},
            </if>
            <if test="authorizeFunction != null">
                authorize_function = #{authorizeFunction,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="dataStatus != null">
                data_status = #{dataStatus,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.unicdata.entity.system.EmployeeAuthorize">
    update employee_authorize
    set employee_id = #{employeeId,jdbcType=INTEGER},
      employee_post = #{employeePost,jdbcType=VARCHAR},
      authorizer_id = #{authorizerId,jdbcType=INTEGER},
      authorizer_post = #{authorizerPost,jdbcType=VARCHAR},
      authorize_function = #{authorizeFunction,jdbcType=VARCHAR},
      type = #{type,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      data_status = #{dataStatus,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>